// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-4.1.50 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BCDramaLib
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import Alamofire
import Combine
import CryptoSwift
import Foundation
import GDTMobSDK
import MJRefresh
import MediaPlayer
import SDWebImage
import SVProgressHUD
import SnapKit
import SuperPlayer
import Swift
import SwiftyJSON
import TXLiteAVSDK_Player
import UIKit
import WebKit
import YYText
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum BCAdType : Swift.Int {
  case banner
  case reward
  case nativeExpress
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias BCVideoPlayOnStart = ([Swift.String : Any]) -> Swift.Void
public typealias BCVideoPlayOnProgress = (Swift.Int, Swift.Int, Swift.Int, Swift.Int) -> Swift.Void
public typealias BCVideoPlayOnEnd = ([Swift.String : Any]) -> Swift.Void
public typealias BCVideoPlayOnUnlock = ([Swift.String : Any]) -> Swift.Void
public typealias BCVideoPlayOnReward = ([Swift.String : Any]) -> Swift.Void
public typealias BCSetPaymentCallBack = ([Swift.String : Any]) -> Swift.Void
public typealias BCPaySuccess = ([Swift.String : Any]) -> Swift.Void
public typealias BCPayCancle = () -> Swift.Void
public typealias BCPayResultVerify = (Swift.Int) -> Swift.Void
public typealias BCAdLoaded = (BCDramaLib.BCAdType, Swift.String, Swift.String, Swift.String) -> Swift.Void
public typealias BCAdClicked = (BCDramaLib.BCAdType) -> Swift.Void
public typealias BCAdDidRewardEffective = (BCDramaLib.BCAdType, Swift.Int) -> Swift.Void
public typealias BCAdClosed = (BCDramaLib.BCAdType) -> Swift.Void
public typealias BCAdFailed = (BCDramaLib.BCAdType, any Swift.Error) -> Swift.Void
public typealias BCRenderStatus = (BCDramaLib.BCAdType, Swift.Bool) -> Swift.Void
public typealias BCStartAdReward = (BCDramaLib.BCAdPlatformType, BCDramaLib.BCAdType) -> Swift.Void
public typealias BCAdUnLock = (BCDramaLib.BCUnLockType, Swift.Int) -> Swift.Void
public typealias BCAdFinish = (Swift.Int) -> Swift.Void
public typealias BCCustomAdvInit = (Swift.String) -> Swift.Void
public typealias BCCustomAdvReward = (Swift.String, Swift.String, Swift.String) -> Swift.Void
public typealias BCCustomAdvNativeExpress = (Swift.String, Swift.Double, Swift.Double) -> Swift.Void
public typealias BCCustomAdvBanner = (Swift.String) -> Swift.Void
extension UIKit.UIImage {
  convenience public init?(sdkNamed name: Swift.String)
}
public enum BCAdPlatformType : Swift.Int, Swift.Decodable {
  case union
  case baidu
  case chuanshanjia
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BCUnLockType : Swift.Int {
  case payment
  case reward
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BCLanguageType {
  case cn
  case ct
  case en
  case vi
  public static func == (a: BCDramaLib.BCLanguageType, b: BCDramaLib.BCLanguageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public static func bc_string(withJSONObject obj: Any) -> Swift.String
  public func localized(with arguments: any Swift.CVarArg..., defaultValue: Swift.String? = nil) -> Swift.String
}
public enum BCTabPageType : Swift.Int {
  case collection
  case album
  case recommend
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BCEnvType : Swift.Int {
  case debug
  case release
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BCStrategyType : Swift.Int {
  case bidding
  case round
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BCVideoManager {
  @objc deinit
}
extension BCDramaLib.BCVideoManager {
  public static func initSDK(withAppId appId: Swift.String, packageName: Swift.String, secret: Swift.String, userId: Swift.String)
  public static func registerGDTSDK(_ appId: Swift.String)
  public static func registerTXLiveSDK(_ licenceURL: Swift.String, key: Swift.String)
  public static func logout()
  public static func showSDK(from vc: UIKit.UIViewController, pageType: BCDramaLib.BCTabPageType = .collection)
  public static func showCollectionPage(from vc: UIKit.UIViewController)
  public static func showAlbumListPage(from vc: UIKit.UIViewController)
  public static func showRecommendPage(from vc: UIKit.UIViewController)
  public static func setLanguage(_ type: BCDramaLib.BCLanguageType)
  public static func setVideoPlayCallBack(onStart: BCDramaLib.BCVideoPlayOnStart?, onProgress: BCDramaLib.BCVideoPlayOnProgress?, onEnd: BCDramaLib.BCVideoPlayOnEnd?, onUnlock: BCDramaLib.BCVideoPlayOnUnlock?, onReward: BCDramaLib.BCVideoPlayOnReward?)
  public static func setEnvType(_ type: BCDramaLib.BCEnvType)
  public static func setPaymentCallback(onPayment: BCDramaLib.BCSetPaymentCallBack?)
  public static func setPayment(onPaySuccess: BCDramaLib.BCPaySuccess?)
  public static func paymentResultVerify(onPayVerify: BCDramaLib.BCPayResultVerify?)
  public static func verifyPaymentResult(orderNo: Swift.String, complet: @escaping (Swift.Int) -> Swift.Void)
  public static func paymentCancel(onPayCancle: BCDramaLib.BCPayCancle?)
  public static func loadVideoAdCallback(onLoaded: BCDramaLib.BCAdLoaded?, onClicked: BCDramaLib.BCAdClicked?, onEffective: BCDramaLib.BCAdDidRewardEffective?, onClosed: BCDramaLib.BCAdClosed?, onFailed: BCDramaLib.BCAdFailed?)
  public static func loadAdvSuccess(onLoaded: BCDramaLib.BCAdLoaded?)
  public static func loadAdvOnClicked(onClicked: BCDramaLib.BCAdClicked?)
  public static func loadAdvEffective(onEffective: BCDramaLib.BCAdDidRewardEffective?)
  public static func loadAdvOnClosed(onClosed: BCDramaLib.BCAdClosed?)
  public static func loadAdvOnFailed(onFailed: BCDramaLib.BCAdFailed?)
  public static func loadAdvOnShowFinished(onFinished: BCDramaLib.BCAdFinish?)
  public static func loadNativeExpressRender(onRender: BCDramaLib.BCRenderStatus?)
  public static func setCustomAdvCallback(initAd: BCDramaLib.BCCustomAdvInit?, rewardAd: BCDramaLib.BCCustomAdvReward?, nativeExpressAd: BCDramaLib.BCCustomAdvNativeExpress?, bannerAd: BCDramaLib.BCCustomAdvBanner?)
  public static func setVideoDefaultRate(_ videoId: Swift.Int, rate: Swift.Double)
  public static func onUnLock(onUnLock: BCDramaLib.BCAdUnLock?)
  public static func onAdDidFinish(onFinish: BCDramaLib.BCAdFinish?)
  public static func startRewardVideo(vc: UIKit.UIViewController, videoId: Swift.Int, eposodeNo: Swift.Int, placementId: Swift.String = "", extra: Swift.String = "", onStartReward: BCDramaLib.BCStartAdReward?)
  public static func jumpToVideoPlayController(from vc: UIKit.UIViewController, videoId: Swift.Int, lastEpisodeNo: Swift.Int)
  public static func jumpToVideoMoreDetailList(from vc: UIKit.UIViewController, _ menuId: Swift.Int, _ menuName: Swift.String)
  public static func getECPM(with platform: BCDramaLib.BCAdPlatformType, adType: BCDramaLib.BCAdType, complete: @escaping (Swift.Int, Swift.String, BCDramaLib.BCAdType) -> Swift.Void)
  public static func setAdvStrategy(type: BCDramaLib.BCStrategyType)
}
public struct BCDeviceUtils {
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func bc_showIndicator()
  @_Concurrency.MainActor @preconcurrency public func bc_hideIndicator()
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func bc_showIndicator()
  @_Concurrency.MainActor @preconcurrency public func bc_hideIndicator()
}
extension BCDramaLib.BCAdType : Swift.Equatable {}
extension BCDramaLib.BCAdType : Swift.Hashable {}
extension BCDramaLib.BCAdType : Swift.RawRepresentable {}
extension BCDramaLib.BCAdPlatformType : Swift.Equatable {}
extension BCDramaLib.BCAdPlatformType : Swift.Hashable {}
extension BCDramaLib.BCAdPlatformType : Swift.RawRepresentable {}
extension BCDramaLib.BCUnLockType : Swift.Equatable {}
extension BCDramaLib.BCUnLockType : Swift.Hashable {}
extension BCDramaLib.BCUnLockType : Swift.RawRepresentable {}
extension BCDramaLib.BCLanguageType : Swift.Equatable {}
extension BCDramaLib.BCLanguageType : Swift.Hashable {}
extension BCDramaLib.BCTabPageType : Swift.Equatable {}
extension BCDramaLib.BCTabPageType : Swift.Hashable {}
extension BCDramaLib.BCTabPageType : Swift.RawRepresentable {}
extension BCDramaLib.BCEnvType : Swift.Equatable {}
extension BCDramaLib.BCEnvType : Swift.Hashable {}
extension BCDramaLib.BCEnvType : Swift.RawRepresentable {}
extension BCDramaLib.BCStrategyType : Swift.Equatable {}
extension BCDramaLib.BCStrategyType : Swift.Hashable {}
extension BCDramaLib.BCStrategyType : Swift.RawRepresentable {}
